<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBsAAAEAIAAUDgAAFgAAACgAAAAgAAAANgAAAAEAIAAAAAAAgA0AAAAAAAAAAAAAAAAAAAAA
        AACdURPHnVETjJ1RE8OdURONnVETvp1RE5CdUROinVETvp1RE4mdURPXnVETx51RE6SdURPBnVETgp1R
        E6+dURO2nVETWp1REgedURO/nVETip1RE6qdUROJnVETup1RE6+dUROSnVETsp1RE4+dURO9nVETfZ1R
        E86dURPNnVETj51RE8CdUROCnVETv51RE4idURPBnVETxZ1RE2qdURO9nVETi51RE9GdUROinVETnZ1R
        E8SdURN4nVETq51RE7KdURNZnFATBJ1RE7idURNVnVETip1RE6edUROXnVETu51RE4mdUROunVETip1R
        E7ydURN0nVET951RE8WdURMfnVETwJ1RE4GdURPAnVETmZ1RE72dUROjnVEThp1RE8GdUROLnVETx51R
        EyydUROTnVETw51RE3WdURO5nVETu51RE1acUBMDnVETuJ1RE5edURO9nVETMJ1REzKdURPQnVETfp1R
        E7CdURObnVETvJ1RE3GdURPQnVETXZ1REgWdURPDnVETeJ1RE1KdURNenVETU51REyGdURNonVET1p1R
        E3idUROOnVETJJ1RE3CdURNSnVETK51RE1+dURNmnVETHZ1REwadURO6nVETaJ1RE7mdURNGnVETL51R
        E3OdURMmnVETS51RE16dURNVnVETYJ1RE7idURIxnVESF51RE7CdURNonVETAJ1REwCdURMAnVETAJ1R
        ExGdUROqnVETbJ1RE4KdURMInVETAJ1REwCdURMAnVETAJ1REwCdURMAnVETC51RE6adURN7nVETjJ1R
        EyGdURMAnVETAJ1REwCdURMAnVETAJ1REwCdURNMnVETmZ1QEgSdUBIBnVETGZ1RExCbUA8AnVASAJ1R
        EwidURNgnVETVJ1RExedURMKnVETCp1REwedURMAnVETAJ1SEwCdURIDnlUZAJtODACcUBIDnVETGZ1R
        ExudURMInVETAJ1QEgSfRwsAnVETAJ1QEgWdUBICnVETAJ1REwidURMSnVASAJxOEQCdURMAnVETAJtQ
        DwCdUBIEnVESMp1RE4ydUROanVEThZ1RE2SdURNMnVETap1RE0qdURM0nVETTZ1RE5GdURNfnVETcJ1R
        E3SdURNtpHpNAJ1REyOdURNTnVETm51RE0adURNQnVETnJ1RE1mdURMxnVETA51REwCdUBIAAAAAAAAA
        AAAAAAAAAAAAAJ1REgidURNenVETZp1RE6idURPGnVEThp1RE1CdURNynVETlJ1RE8GdURNpnVET051R
        E5+dUROqnVET251RE6KdUBIHnVETpZ1RE7WdURPjnVETyJ1RE6qdURPPnVETkp1RE8qdURMjAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnVETD51RE6qdUROinVETdp1RE7WdUROjnVETs51RE5idURNpnVETqJ1R
        E8OdURPQnVETWJ1RE2mdUROqnVETp51REwqdURODnVETsZ1RE9qdUROmnVETqp1RE9adURO8nVETrp1R
        ExcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdURMHnVETMZ1RE2OdUROdnVETo51RE42dURNOnVETtZ1R
        E36dURM7nVETS51RE0mdURMznVETLJ1REz2dURNAnVETDJ1REzSdUROfnVETwJ1RE5+dURNtnVETUJ1R
        E0mdURM3nVETCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ1REwCdURMAnVETEp1REzqdURMZnVETN51R
        EiudURM4pkUAC3aJjgB4h4kAe4J+AIluUgCdURMAfYB6AHWLkgBfq9gA5wAABKdDACGeQAAgmUgHG51R
        ExSdURMAnVETAJ1REwCdURMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdURMAnVETAJ1R
        EwCdURMAllooAIF5awBUuvoUV7bxRle28VpXtvFAV7bxD1e28QBXtvE/V7bxY1e28WJWt/NgU7j3XI/S
        /Fn2//8YnVETAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFa28QBWtvEAV7bxRle28cZXtvH3V7bx/le28fRXtvG5V7bxM1e28ZtXtvH/V7bx/1e2
        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
        AP//gAH//8AB///AAf//4AP///AD///4B/8=
</value>
  </data>
</root>